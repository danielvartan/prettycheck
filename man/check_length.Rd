% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/length.R
\name{check_length}
\alias{check_length}
\alias{assert_length}
\alias{test_length}
\title{Check if an argument has a specific length}
\usage{
check_length(
  x,
  len = 1,
  min_len = NULL,
  max_len = NULL,
  null_ok = FALSE,
  .names = deparse(substitute(x))
)

assert_length(
  x,
  len = 1,
  min_len = NULL,
  max_len = NULL,
  null_ok = FALSE,
  .names = deparse(substitute(x))
)

test_length(
  x,
  len = 1,
  min_len = NULL,
  max_len = NULL,
  null_ok = FALSE,
  .names = deparse(substitute(x))
)
}
\arguments{
\item{x}{Any R object.}

\item{len}{(optional) an integer number indicating the expected length of \code{x}
(default: \code{1}).}

\item{min_len}{(Optional) An integer number indicating the minimum length of
\code{x} (Default: \code{NULL}).}

\item{max_len}{(Optional) An integer number indicating the maximum length of
\code{x} (Default: \code{NULL}).}

\item{null_ok}{(Optional) A \code{\link[base:logical]{logical}} flag indicating if
\code{NULL} values are allowed (Default: \code{FALSE}).}

\item{.names}{(Optional) A \code{\link[base:character]{character}} vector specifying
the names of the objects being tested. This argument is used internally
and should not be set by the user.}
}
\value{
\itemize{
\item \verb{test_*}: \code{TRUE} if it passes the test; \code{FALSE} otherwise.
\item \verb{check_*}: \code{TRUE} if it passes the test; a string with a message otherwise.
\item \verb{assertion_*}: The same input (as \link[base:invisible]{invisible}) if it
passes the test; an error message otherwise.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\examples{
x <- 1:2

test_length(x, len = 2)
#> [1] TRUE # Expected

check_length(x, len = 1) |> cli::cli_alert_warning()
#> ! x must have 1 element. # Expected

check_length(x, min_len = 3) |> cli::cli_alert_warning()
#> ! x must have 3 or more elements. # Expected

check_length(x, max_len = 1) |> cli::cli_alert_warning()
#> ! x must have 1 or less elements. # Expected

x <- 1
check_length(x, min_len = 2, max_len = 3) |> cli::cli_alert_warning()
#> ! x must have a length between 2 and 3. # Expected
}
