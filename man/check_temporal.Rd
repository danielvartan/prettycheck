% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/temporal.R
\name{check_temporal}
\alias{check_temporal}
\alias{test_temporal}
\alias{assert_temporal}
\alias{expect_temporal}
\title{Check if an argument is a temporal object}
\usage{
check_temporal(
  x,
  rm = NULL,
  any_missing = TRUE,
  null_ok = FALSE,
  .names = deparse(substitute(x))
)

test_temporal(
  x,
  rm = NULL,
  any_missing = TRUE,
  null_ok = FALSE,
  .names = deparse(substitute(x))
)

assert_temporal(
  x,
  rm = NULL,
  any_missing = TRUE,
  null_ok = FALSE,
  .names = deparse(substitute(x)),
  .var.name = checkmate::vname(x),
  add = NULL
)

expect_temporal(
  x,
  rm = NULL,
  any_missing = TRUE,
  null_ok = FALSE,
  .names = deparse(substitute(x)),
  info = NULL,
  label = checkmate::vname(x)
)
}
\arguments{
\item{x}{Any R object.}

\item{rm}{(Optional) A \code{\link[base:character]{character}} vector indicating
the name of classes to remove from the check. See the \code{Details} section
for more information (Default: \code{NULL}).}

\item{any_missing}{(Optional) A \code{\link[base:logical]{logical}} flag indicating
if missing values are allowed (Default: \code{TRUE}).}

\item{null_ok}{(Optional) A \code{\link[base:logical]{logical}} flag indicating if
\code{NULL} values are allowed (Default: \code{FALSE}).}

\item{.names}{(Optional) A \code{\link[base:character]{character}} vector specifying
the names of the objects being tested. This argument is used internally
and should not be set by the user.}

\item{.var.name}{(Optional) A \code{\link[base:character]{character}} string
indicating the name of the checked object to print in assertions.
This argument is used internally and should not be set by the user.}

\item{add}{(Optional) A \code{\link[checkmate:AssertCollection]{AssertCollection}}
object indicating the collection to store assertion messages. This
argument is used internally and should not be set by the user.}

\item{info}{(Optional) A \code{\link[base:character]{character}} string with extra
information to be included in the message for the `testthat`` reporter.
This argument is used internally and should not be set by the user.}

\item{label}{(Optional) A \code{\link[base:character]{character}} string
indicating the name of the checked object to print in messages.
This argument is used internally and should not be set by the user.}
}
\value{
\itemize{
\item \verb{test_*}: \code{TRUE} if it passes the test; \code{FALSE} otherwise.
\item \verb{check_*}: \code{TRUE} if it passes the test; a string with a message otherwise.
\item \verb{assertion_*}: The same input (as \link[base:invisible]{invisible}) if it
passes the test; an error message otherwise.
\item \verb{expect_*}: The same input (as \link[base:invisible]{invisible}) if it
passes the test; an error message otherwise.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

\verb{*_temporal()} check if an argument is a temporal object.
}
\details{
These functions check the following classes of temporal objects:

\if{html}{\out{<div class="sourceCode">}}\preformatted{classes <- c(
  "Duration", "Period", "difftime", "hms", "Date", "POSIXct",
  "POSIXlt", "Interval", "ts", "tsibble", "zoo", "xts", "timeDate",
  "timeSeries", "circular", "yearmon", "yearqtr", "year", "quarter",
  "month", "week", "day", "hour", "minute", "second", "millisecond",
  "microsecond", "nanosecond"
)
}\if{html}{\out{</div>}}
}
\examples{
test_temporal(1)
#> [1] FALSE # Expected

test_temporal("a")
#> [1] FALSE # Expected

test_temporal(lubridate::dhours())
#> [1] TRUE # Expected

test_temporal(lubridate::hours())
#> [1] TRUE # Expected

test_temporal(as.difftime(1, units = "hours"))
#> [1] TRUE # Expected

test_temporal(hms::parse_hm("01:00"))
#> [1] TRUE # Expected

test_temporal(as.Date("2020-01-01"))
#> [1] TRUE # Expected

test_temporal(Sys.time())
#> [1] TRUE # Expected

int <- lubridate::interval(as.Date("2001-01-01"), as.Date("2002-01-01"))
test_temporal(int)
#> [1] TRUE # Expected

test_temporal(c(lubridate::dhours(), NA), any_missing = FALSE)
#> [1] FALSE # Expected

test_temporal(NULL, null_ok = FALSE)
#> [1] FALSE # Expected
}
