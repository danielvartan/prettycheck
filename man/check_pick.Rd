% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pick.R
\name{check_pick}
\alias{check_pick}
\alias{assert_pick}
\alias{test_pick}
\title{Check how many arguments were picked}
\usage{
check_pick(
  ...,
  pick = NULL,
  min_pick = NULL,
  max_pick = NULL,
  .names = get_names(...)
)

assert_pick(
  ...,
  pick = NULL,
  min_pick = NULL,
  max_pick = NULL,
  .names = get_names(...)
)

test_pick(
  ...,
  pick = NULL,
  min_pick = NULL,
  max_pick = NULL,
  .names = get_names(...)
)
}
\arguments{
\item{...}{Objects to compare.}

\item{pick}{(optional) an integer number indicating the expected number of
arguments to pick (default: \code{NULL}) (default: \code{1}).}

\item{min_pick}{(optional) an integer number indicating the minimum number of
arguments to pick (default: \code{NULL}).}

\item{max_pick}{(optional) an integer number indicating the maximum number of
arguments to pick (default: \code{NULL}).}

\item{.names}{(optional) a \link[base:character]{character} vector
containing names for each object in \code{...} (default:
\code{prettycheck:::get_names(...)}). This argument is used internally and
should not be set by the user.}
}
\value{
\itemize{
\item \verb{test_*}: \code{TRUE} if it passes the test; \code{FALSE} otherwise.
\item \verb{check_*}: \code{TRUE} if it passes the test; a string with a message otherwise.
\item \verb{assertion_*}: The same input as \link[=invisible]{invisible} if it passes the
test; an error message otherwise.
\item \verb{expect_*}: The same input as \link[=invisible]{invisible} if it passes the
test; an error message otherwise.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

want to limit the number of arguments that can be assigned in a function.
}
\examples{
x <- 1; y <- NULL
test_pick(x, y, pick = 1)
#> [1] TRUE # Expected

x <- 1; y <- NULL; z <- NULL
check_pick(x, y, z, pick = 2) |> cli::cli_alert_warning()
#> ! You must pick 2 of the x, y and z arguments. # Expected

x <- 1; y <- NULL
check_pick(x, y, min_pick = 2) |> cli::cli_alert_warning()
#> ! You must assign the x and y arguments. # Expected

x <- 1; y <- NULL; z <- NULL
check_pick(x, y, z, min_pick = 2) |> cli::cli_alert_warning()
#> ! You must pick 2 or more of the x, y and z arguments. # Expected

x <- 1; y <- 1; z <- NULL
check_pick(x, y, z, max_pick = 1) |> cli::cli_alert_warning()
#> ! You must pick 1 or less of the x, y and z arguments. # Expected
}
