[{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official email address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement danvartan@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to prettycheck","title":"Contributing to prettycheck","text":"First , thanks considering contributing prettycheck! 👍 ’s people like make rewarding us - project maintainers - work prettycheck. 😊 prettycheck open source project, maintained people care. directly funded .","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to prettycheck","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How You Can Contribute","title":"Contributing to prettycheck","text":"several ways can contribute project. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"share-the-love-️","dir":"","previous_headings":"How You Can Contribute","what":"Share the Love ❤️","title":"Contributing to prettycheck","text":"Think prettycheck useful? Let others discover , telling person, via Twitter blog post. Using prettycheck paper writing? Consider citing .","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"propose-an-idea-","dir":"","previous_headings":"How You Can Contribute","what":"Propose an Idea 💡","title":"Contributing to prettycheck","text":"idea new prettycheck feature? Take look documentation [issue list][issue] see isn’t included suggested yet. , suggest idea [issue GitHub][issue]. can’t promise implement idea, helps : Explain detail work Keep scope narrow possible See want contribute code idea well.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"report-a-bug-","dir":"","previous_headings":"How You Can Contribute","what":"Report a Bug 🐛","title":"Contributing to prettycheck","text":"Using prettycheck discovered bug? ’s annoying! Don’t let others experience report issue GitHub can fix . good bug report makes easier us , please include: content utils::sessionInfo(). details local setup might helpful troubleshooting. Detailed steps reproduce bug (Tip: use reprex package).","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"improve-the-documentation-","dir":"","previous_headings":"How You Can Contribute","what":"Improve the Documentation 📖","title":"Contributing to prettycheck","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"the-website","dir":"","previous_headings":"How You Can Contribute > Improve the Documentation 📖","what":"The Website","title":"Contributing to prettycheck","text":"website generated pkgdown. means don’t write html: Content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation.","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"function-documentation","dir":"","previous_headings":"How You Can Contribute > Improve the Documentation 📖","what":"Function Documentation","title":"Contributing to prettycheck","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository Look file function Propose file change update function documentation roxygen comments (starting #')","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"contribute-code-","dir":"","previous_headings":"How You Can Contribute","what":"Contribute Code 📝","title":"Contributing to prettycheck","text":"Care fix bugs implement new functionality prettycheck? Awesome! 👏 look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"https://danielvartan.github.io/prettycheck/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development Guidelines","title":"Contributing to prettycheck","text":"try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream main Open project RStudio IDE choice Write code Test code (Bonus points adding unit tests) Document code (See function documentation ) Check code devtools::check() aim 0 errors, warnings notes Commit push changes Submit pull request Also note use tidyverse design guide tidyverse style guide. code must conform principles rules.","code":""},{"path":"https://danielvartan.github.io/prettycheck/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Daniel Vartanian Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danielvartan.github.io/prettycheck/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Vartanian. Author, maintainer, conceptor, copyright holder.","code":""},{"path":"https://danielvartan.github.io/prettycheck/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vartanian, D.. (2025). {prettycheck}: Pretty assertive programming. R package. https://danielvartan.github.io/prettycheck","code":"@Misc{,   title = {{prettycheck}: Pretty assertive programming},   author = {Daniel Vartanian},   year = {2025},   url = {https://danielvartan.github.io/prettycheck},   note = {R package}, }"},{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Pretty assertive programming","text":"✨✔️✅❌🔍⚠️🛑💎✨🧹🔮🦄🎯🚦🔒🔧🎨 Assertive programming doesn’t ugly. ultra-fast checks aren’t top priority, prettycheck . prettycheck R package provides set functions produce pretty informative error messages, primarily using cli package r-lib. prettycheck adheres tidyverse principles seamlessly integrates tidyverse ecosystem. Need faster assertive programming? Try checkmate. Since prettycheck uses structural approach checks, transitioning packages straightforward. can also use packages together without conflicts.","code":""},{"path":"https://danielvartan.github.io/prettycheck/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pretty assertive programming","text":"can install prettycheck using remotes package:","code":"remotes::install_github(\"danielvartan/prettycheck\")"},{"path":"https://danielvartan.github.io/prettycheck/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Pretty assertive programming","text":"Like checkmate, prettycheck includes four family functions: test_*(), check_*(), assert_*(), expect_*(). test_*() functions return logical flag; check_*() functions throw warning message string condition met; assert_*() expect_*() functions throw error condition met. condition met, check_*() returns logical flag; assert_*() expect_*() functions return input object invisibly. functions available: check_duration() test_duration() assert_duration(): Check argument Duration object check_hms() test_hms() assert_hms(): Check argument hms object check_identical() test_identical() assert_identical(): Check multiple objects identical check_interval() test_interval() assert_interval(): Check argument Interval object check_length() test_length() assert_length(): Check argument specific length check_numeric() test_numeric() assert_numeric(): Check argument numeric object check_period() test_period() assert_period(): Check argument Period object check_pick() test_pick() assert_pick(): Check many arguments picked check_posixt() test_period() assert_period(): Check argument POSIXt object Click see full list functions.","code":""},{"path":"https://danielvartan.github.io/prettycheck/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Pretty assertive programming","text":"prettycheck code released MIT license.","code":""},{"path":"https://danielvartan.github.io/prettycheck/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Pretty assertive programming","text":"welcome contributions, including bug reports. Take moment review Guidelines Contributing.  Become prettycheck supporter! Click make donation. Please indicate prettycheck package donation message.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert a color input — assert_color","title":"Assert a color input — assert_color","text":"assert_color() ensures provided color values valid color names recognized grDevices::colors() valid hexadecimal color codes (#RGB #RRGGBB).","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert a color input — assert_color","text":"","code":"assert_color(color, any_missing = FALSE, null_ok = FALSE)"},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert a color input — assert_color","text":"color character vector color names hexadecimal color codes. any_missing (Optional) logical flag indicating missing values allowed (Default: TRUE). null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE).","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert a color input — assert_color","text":"color (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert a color input — assert_color","text":"","code":"assert_color(\"#FF5733\") assert_color(\"blue\") assert_color(\"transparent\") assert_color(c(\"#FF5733\", \"blue\", \"transparent\"))"},{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert special color inputs — assert_color_options","text":"","code":"assert_color_options(color_low = NULL, color_high = NULL, viridis = NULL)"},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert special color inputs — assert_color_options","text":"color_low, color_high (Optional) character vector representing color names hexadecimal color codes (Default: NULL). viridis (Optional) character vector representing viridis color palette names (Default: NULL).","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert special color inputs — assert_color_options","text":"invisible TRUE input valid; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assert special color inputs — assert_color_options","text":"assert_color_options() ensures provided color options valid. checks color_low color_high arguments valid colors provided together, , alternatively, ensures viridis color palette names valid. options mutually exclusive.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/assert_color_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert special color inputs — assert_color_options","text":"","code":"assert_color_options(color_low = \"#FF5733\", color_high = \"#33FF57\")  assert_color_options(   color_low = c(\"#FF5733\", \"#FFF\"),   color_high = c(\"#33FF57\", \"#000\") )  assert_color_options(viridis = \"magma\") assert_color_options(viridis = c(\"magma\", \"viridis\"))"},{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a dataset exists in a package — check_data","text":"","code":"check_data(data, package)  test_data(data, package)  assert_data(data, package)"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a dataset exists in a package — check_data","text":"data character string dataset name. package character string package name.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a dataset exists in a package — check_data","text":"test_*: TRUE passes test; FALSE otherwise. assertion_*: invisible TRUE passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a dataset exists in a package — check_data","text":"","code":"if (requireNamespace(\"datasets\", quietly = TRUE)) {   test_data(\"mtcars\", \"datasets\")   #> [1] TRUE # Expected } #> [1] TRUE"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a Duration object — check_duration","title":"Check if an argument is a Duration object — check_duration","text":"*_duration() check argument lubridate Duration object.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a Duration object — check_duration","text":"","code":"check_duration(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  test_duration(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  assert_duration(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   .var.name = checkmate::vname(x),   add = NULL )  expect_duration(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   info = NULL,   label = checkmate::vname(x) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a Duration object — check_duration","text":"x R object. lower (Optional) value class x indicating minimum value x (Default: -Inf). upper (Optional) value class x indicating maximum value x (Default: Inf). any_missing (Optional) logical flag indicating missing values allowed (Default: TRUE). null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user. .var.name (Optional) character string indicating name checked object print assertions. argument used internally set user. add (Optional) AssertCollection object indicating collection store assertion messages. argument used internally set user. info (Optional) character string extra information included message `testthat“ reporter. argument used internally set user. label (Optional) character string indicating name checked object print messages. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a Duration object — check_duration","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise. expect_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a Duration object — check_duration","text":"","code":"test_duration(1) #> [1] FALSE #> [1] FALSE # Expected  test_duration(hms::parse_hm(\"01:00\")) #> [1] FALSE #> [1] FALSE # Expected  test_duration(lubridate::dhours()) #> [1] TRUE #> [1] TRUE # Expected  test_duration(lubridate::dhours(1), lower = lubridate::dhours(2)) #> [1] FALSE #> [1] FALSE # Expected  test_duration(lubridate::dhours(2), upper = lubridate::dhours(1)) #> [1] FALSE #> [1] FALSE # Expected  test_duration(c(lubridate::dhours(), NA), any_missing = FALSE) #> [1] FALSE #> [1] FALSE # Expected  test_duration(NULL, null_ok = FALSE) #> [1] FALSE #> [1] FALSE # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument has zero length — check_empty","title":"Check if an argument has zero length — check_empty","text":"*_empty() check argument zero length.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument has zero length — check_empty","text":"","code":"check_empty(x, null_ok = FALSE, .names = deparse(substitute(x)))  test_empty(x, null_ok = FALSE, .names = deparse(substitute(x)))  assert_empty(x, null_ok = FALSE, .names = deparse(substitute(x)))"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument has zero length — check_empty","text":"x R object. null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument has zero length — check_empty","text":"","code":"test_empty(1) #> [1] FALSE #> [1] FALSE # Expected  test_empty(character()) #> [1] TRUE #> [1] TRUE # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_hms.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a hms object — check_hms","title":"Check if an argument is a hms object — check_hms","text":"*_hms() check argument hms object.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_hms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a hms object — check_hms","text":"","code":"check_hms(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  test_hms(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  assert_hms(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   .var.name = checkmate::vname(x),   add = NULL )  expect_hms(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   info = NULL,   label = checkmate::vname(x) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_hms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a hms object — check_hms","text":"x R object. lower (Optional) value class x indicating minimum value x (Default: -Inf). upper (Optional) value class x indicating maximum value x (Default: Inf). any_missing (Optional) logical flag indicating missing values allowed (Default: TRUE). null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user. .var.name (Optional) character string indicating name checked object print assertions. argument used internally set user. add (Optional) AssertCollection object indicating collection store assertion messages. argument used internally set user. info (Optional) character string extra information included message `testthat“ reporter. argument used internally set user. label (Optional) character string indicating name checked object print messages. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_hms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a hms object — check_hms","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise. expect_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_hms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a hms object — check_hms","text":"","code":"test_hms(1) #> [1] FALSE #> [1] FALSE # Expected  test_hms(lubridate::dhours(1)) #> [1] FALSE #> [1] FALSE # Expected  test_hms(hms::parse_hm(\"01:00\")) #> [1] TRUE #> [1] TRUE # Expected  test_hms(hms::parse_hm(\"01:00\"), lower = hms::parse_hm(\"02:00\")) #> [1] FALSE #> [1] FALSE # Expected  test_hms(hms::parse_hm(\"02:00\"), upper = hms::parse_hm(\"01:00\")) #> [1] FALSE #> [1] FALSE # Expected  test_hms(c(hms::parse_hm(\"01:00\"), NA), any_missing = FALSE) #> [1] FALSE #> [1] FALSE # Expected  test_hms(NULL, null_ok = FALSE) #> [1] FALSE #> [1] FALSE # Expected"},{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/reference/check_identical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if multiple objects are identical — check_identical","text":"","code":"check_identical(..., type = \"value\", .names = get_names(...))  assert_identical(..., type = \"value\", .names = get_names(...))  test_identical(..., type = \"value\", .names = get_names(...))"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_identical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if multiple objects are identical — check_identical","text":"... Objects compare. type (optional) string corresponding type comparison perform. Valid values: \"value\", \"length\", \"class\" (default: \"value\"). .names (Optional) character vector specifying names objects tested. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_identical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if multiple objects are identical — check_identical","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_identical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if multiple objects are identical — check_identical","text":"","code":"x <- 1; y <- 1 test_identical(x, y, type = \"value\") #> [1] TRUE #> [1] TRUE # Expected  x <- 1; y <- 2 check_identical(x, y, type = \"value\") |> cli::cli_alert_warning() #> ! x and y must have identical values. #> ! x and y must have identical values. # Expected  x <- letters; y <- 1:2 check_identical(x, y, type = \"length\") |> cli::cli_alert_warning() #> ! x and y must have identical lengths. #> ! x and y must have identical lengths. # Expected  x <- \"a\"; y <- 1 check_identical(x, y, type = \"class\") |> cli::cli_alert_warning() #> ! x and y must belong to the same class. #> ! x and y must belong to the same class. # Expected"},{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/reference/check_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if R is being used interactively — check_interactive","text":"","code":"check_interactive()  test_interactive()  assert_interactive()"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_interactive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if R is being used interactively — check_interactive","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_interactive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if R is being used interactively — check_interactive","text":"","code":"if (interactive()) {   test_interactive()   #> [1] TRUE # Expected }"},{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/reference/check_internet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for internet connectivity — check_internet","text":"","code":"check_internet()  test_internet()  assert_internet()"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_internet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for internet connectivity — check_internet","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_internet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for internet connectivity — check_internet","text":"","code":"if (interactive()) {   test_internet() }"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is an Interval object — check_interval","title":"Check if an argument is an Interval object — check_interval","text":"*_interval() check argument lubridate Interval object.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is an Interval object — check_interval","text":"","code":"check_interval(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  test_interval(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  assert_interval(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   .var.name = checkmate::vname(x),   add = NULL )  expect_interval(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   info = NULL,   label = checkmate::vname(x) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is an Interval object — check_interval","text":"x R object. lower (Optional) value class x indicating minimum value x (Default: -Inf). upper (Optional) value class x indicating maximum value x (Default: Inf). any_missing (Optional) logical flag indicating missing values allowed (Default: TRUE). null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user. .var.name (Optional) character string indicating name checked object print assertions. argument used internally set user. add (Optional) AssertCollection object indicating collection store assertion messages. argument used internally set user. info (Optional) character string extra information included message `testthat“ reporter. argument used internally set user. label (Optional) character string indicating name checked object print messages. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is an Interval object — check_interval","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise. expect_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is an Interval object — check_interval","text":"","code":"test_interval(1) #> [1] FALSE #> [1] FALSE # Expected  test_interval(lubridate::dhours()) #> [1] FALSE #> [1] FALSE # Expected  int <- lubridate::interval(as.Date(\"2001-01-01\"), as.Date(\"2002-01-01\"))  test_interval(int) #> [1] TRUE #> [1] TRUE # Expected  test_interval(int, lower = lubridate::dyears(2)) #> [1] FALSE #> [1] FALSE # Expected  test_interval(int, upper = lubridate::dyears(0.5)) #> [1] FALSE #> [1] FALSE # Expected  test_interval(c(int, NA), any_missing = FALSE) #> [1] FALSE #> [1] FALSE # Expected  test_interval(NULL, null_ok = FALSE) #> [1] FALSE #> [1] FALSE # Expected"},{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/reference/check_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument has a specific length — check_length","text":"","code":"check_length(   x,   len = 1,   min_len = NULL,   max_len = NULL,   null_ok = FALSE,   .names = deparse(substitute(x)) )  assert_length(   x,   len = 1,   min_len = NULL,   max_len = NULL,   null_ok = FALSE,   .names = deparse(substitute(x)) )  test_length(   x,   len = 1,   min_len = NULL,   max_len = NULL,   null_ok = FALSE,   .names = deparse(substitute(x)) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument has a specific length — check_length","text":"x R object. len (optional) integer number indicating expected length x (default: 1). min_len (Optional) integer number indicating minimum length x (Default: NULL). max_len (Optional) integer number indicating maximum length x (Default: NULL). null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument has a specific length — check_length","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument has a specific length — check_length","text":"","code":"x <- 1:2  test_length(x, len = 2) #> [1] TRUE #> [1] TRUE # Expected  check_length(x, len = 1) |> cli::cli_alert_warning() #> ! x must have 1  element. #> ! x must have 1 element. # Expected  check_length(x, min_len = 3) |> cli::cli_alert_warning() #> ! x must have 3 or more elements. #> ! x must have 3 or more elements. # Expected  check_length(x, max_len = 1) |> cli::cli_alert_warning() #> ! x must have 1 or less elements. #> ! x must have 1 or less elements. # Expected  x <- 1 check_length(x, min_len = 2, max_len = 3) |> cli::cli_alert_warning() #> ! x must have a length between 2 and 3. #> ! x must have a length between 2 and 3. # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a namespace is loaded — check_namespace","title":"Check if a namespace is loaded — check_namespace","text":"*_namespace() check argument zero length.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a namespace is loaded — check_namespace","text":"","code":"check_namespace(x, null_ok = FALSE, .names = deparse(substitute(x)))  test_namespace(x, null_ok = FALSE, .names = deparse(substitute(x)))  assert_namespace(   x,   null_ok = FALSE,   .names = deparse(substitute(x)),   .var.name = checkmate::vname(x),   add = NULL )  expect_namespace(   x,   null_ok = FALSE,   .names = deparse(substitute(x)),   info = NULL,   label = checkmate::vname(x) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_namespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a namespace is loaded — check_namespace","text":"x R object. null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user. .var.name (Optional) character string indicating name checked object print assertions. argument used internally set user. add (Optional) AssertCollection object indicating collection store assertion messages. argument used internally set user. info (Optional) character string extra information included message `testthat“ reporter. argument used internally set user. label (Optional) character string indicating name checked object print messages. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_namespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a namespace is loaded — check_namespace","text":"","code":"test_namespace(\"TeSt\") #> [1] FALSE #> [1] FALSE # Expected  test_namespace(\"prettycheck\") #> [1] TRUE #> [1] TRUE # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_not_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument has length greater than zero — check_not_empty","title":"Check if an argument has length greater than zero — check_not_empty","text":"*_not_empty() check argument length greater zero.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_not_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument has length greater than zero — check_not_empty","text":"","code":"check_not_empty(x, null_ok = FALSE, .names = deparse(substitute(x)))  test_not_empty(x, null_ok = FALSE, .names = deparse(substitute(x)))  assert_not_empty(x, null_ok = FALSE, .names = deparse(substitute(x)))"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_not_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument has length greater than zero — check_not_empty","text":"x R object. null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_not_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument has length greater than zero — check_not_empty","text":"","code":"test_not_empty(character()) #> [1] FALSE #> [1] FALSE # Expected  test_not_empty(1) #> [1] TRUE #> [1] TRUE # Expected"},{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/reference/check_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a numeric object — check_numeric","text":"","code":"check_numeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any_missing = TRUE,   all_missing = TRUE,   len = NULL,   min_len = NULL,   max_len = NULL,   null_ok = FALSE,   .names = deparse(substitute(x)) )  assert_numeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any_missing = TRUE,   all_missing = TRUE,   len = NULL,   min_len = NULL,   max_len = NULL,   null_ok = FALSE,   .names = deparse(substitute(x)) )  test_numeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any_missing = TRUE,   all_missing = TRUE,   len = NULL,   min_len = NULL,   max_len = NULL,   null_ok = FALSE,   .names = deparse(substitute(x)) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a numeric object — check_numeric","text":"x R object. lower (Optional) value class x indicating minimum value x (Default: -Inf). upper (Optional) value class x indicating maximum value x (Default: Inf). finite (Optional) logical flag indicating values must finite (Default: TRUE). any_missing (Optional) logical flag indicating missing values allowed (Default: TRUE). all_missing (Optional) logical flag indicating missing values allowed (Default: TRUE). len (Optional) integer number indicating expected length x (Default: NULL). min_len (Optional) integer number indicating minimum length x (Default: NULL). max_len (Optional) integer number indicating maximum length x (Default: NULL). null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a numeric object — check_numeric","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a numeric object — check_numeric","text":"","code":"test_numeric(\"a\") #> [1] FALSE #> [1] FALSE # Expected  test_numeric(lubridate::duration()) #> [1] FALSE #> [1] FALSE # Expected  test_numeric(1:10) #> [1] TRUE #> [1] TRUE # Expected  x <- 1:2 check_numeric(x, len = 1) |> cli::cli_alert_warning() #> ! x must have 1  element. #> ! x must have 1 element. # Expected  check_numeric(x, min_len = 3) |> cli::cli_alert_warning() #> ! x must have 3 or more elements. #> ! x must have 3 or more elements. # Expected  check_numeric(x, max_len = 1) |> cli::cli_alert_warning() #> ! x must have 1 or less elements. #> ! x must have 1 or less elements. # Expected  x <- 1 check_numeric(1, min_len = 2, max_len = 3) |> cli::cli_alert_warning() #> ! 1 must have 2 or more elements. #> ! x must have a length between 2 and 3. # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a Period object — check_period","title":"Check if an argument is a Period object — check_period","text":"*_period() check argument lubridate Period object.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a Period object — check_period","text":"","code":"check_period(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  test_period(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  assert_period(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   .var.name = checkmate::vname(x),   add = NULL )  expect_period(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   info = NULL,   label = checkmate::vname(x) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a Period object — check_period","text":"x R object. lower (Optional) value class x indicating minimum value x (Default: -Inf). upper (Optional) value class x indicating maximum value x (Default: Inf). any_missing (Optional) logical flag indicating missing values allowed (Default: TRUE). null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user. .var.name (Optional) character string indicating name checked object print assertions. argument used internally set user. add (Optional) AssertCollection object indicating collection store assertion messages. argument used internally set user. info (Optional) character string extra information included message `testthat“ reporter. argument used internally set user. label (Optional) character string indicating name checked object print messages. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a Period object — check_period","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise. expect_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a Period object — check_period","text":"","code":"test_period(1) #> [1] FALSE #> [1] FALSE # Expected  test_period(hms::parse_hm(\"01:00\")) #> [1] FALSE #> [1] FALSE # Expected  test_period(lubridate::hours()) #> [1] TRUE #> [1] TRUE # Expected  test_period(lubridate::hours(1), lower = lubridate::hours(2)) #> [1] FALSE #> [1] FALSE # Expected  test_period(lubridate::hours(2), upper = lubridate::hours(1)) #> [1] FALSE #> [1] FALSE # Expected  test_period(c(lubridate::hours(), NA), any_missing = FALSE) #> [1] FALSE #> [1] FALSE # Expected  test_period(NULL, null_ok = FALSE) #> [1] FALSE #> [1] FALSE # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Check how many arguments were picked — check_pick","title":"Check how many arguments were picked — check_pick","text":"want limit number arguments can assigned function.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check how many arguments were picked — check_pick","text":"","code":"check_pick(   ...,   pick = NULL,   min_pick = NULL,   max_pick = NULL,   .names = get_names(...) )  assert_pick(   ...,   pick = NULL,   min_pick = NULL,   max_pick = NULL,   .names = get_names(...) )  test_pick(   ...,   pick = NULL,   min_pick = NULL,   max_pick = NULL,   .names = get_names(...) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check how many arguments were picked — check_pick","text":"... Objects compare. pick (Optional) integer number indicating expected number arguments pick (default: NULL) (default: 1). min_pick (Optional) integer number indicating minimum number arguments pick (default: NULL). max_pick (Optional) integer number indicating maximum number arguments pick (default: NULL). .names (Optional) character vector specifying names objects tested. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_pick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check how many arguments were picked — check_pick","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_pick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check how many arguments were picked — check_pick","text":"","code":"x <- 1; y <- NULL test_pick(x, y, pick = 1) #> [1] TRUE #> [1] TRUE # Expected  x <- 1; y <- NULL; z <- NULL check_pick(x, y, z, pick = 2) |> cli::cli_alert_warning() #> ! You must pick 2 of the x, y and z arguments. #> ! You must pick 2 of the x, y and z arguments. # Expected  x <- 1; y <- NULL check_pick(x, y, min_pick = 2) |> cli::cli_alert_warning() #> ! You must assign the x and y arguments. #> ! You must assign the x and y arguments. # Expected  x <- 1; y <- NULL; z <- NULL check_pick(x, y, z, min_pick = 2) |> cli::cli_alert_warning() #> ! You must pick 2 or more of the x, y and z arguments. #> ! You must pick 2 or more of the x, y and z arguments. # Expected  x <- 1; y <- 1; z <- NULL check_pick(x, y, z, max_pick = 1) |> cli::cli_alert_warning() #> ! You must pick 1 or less of the x, y and z arguments. #> ! You must pick 1 or less of the x, y and z arguments. # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_posixt.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a POSIXt object — check_posixt","title":"Check if an argument is a POSIXt object — check_posixt","text":"*_posixt() check argument POSIXt object.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_posixt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a POSIXt object — check_posixt","text":"","code":"check_posixt(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  test_posixt(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  assert_posixt(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   .var.name = checkmate::vname(x),   add = NULL )  expect_posixt(   x,   lower = -Inf,   upper = Inf,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   info = NULL,   label = checkmate::vname(x) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_posixt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a POSIXt object — check_posixt","text":"x R object. lower (Optional) value class x indicating minimum value x (Default: -Inf). upper (Optional) value class x indicating maximum value x (Default: Inf). any_missing (Optional) logical flag indicating missing values allowed (Default: TRUE). null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user. .var.name (Optional) character string indicating name checked object print assertions. argument used internally set user. add (Optional) AssertCollection object indicating collection store assertion messages. argument used internally set user. info (Optional) character string extra information included message `testthat“ reporter. argument used internally set user. label (Optional) character string indicating name checked object print messages. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_posixt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a POSIXt object — check_posixt","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise. expect_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_posixt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a POSIXt object — check_posixt","text":"","code":"test_posixt(1) #> [1] FALSE #> [1] FALSE # Expected  test_posixt(hms::as_hms(\"01:02:03\")) #> [1] FALSE #> [1] FALSE # Expected  test_posixt(Sys.time()) #> [1] TRUE #> [1] TRUE # Expected  test_posixt(Sys.time(), lower = Sys.time() + lubridate::dhours(1)) #> [1] FALSE #> [1] FALSE # Expected  test_posixt(Sys.time(), upper = Sys.time() - lubridate::dhours(1)) #> [1] FALSE #> [1] FALSE # Expected  test_posixt(c(Sys.time(), NA), any_missing = FALSE) #> [1] FALSE #> [1] FALSE # Expected  test_posixt(NULL, null_ok = FALSE) #> [1] FALSE #> [1] FALSE # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a scalar object — check_scalar","title":"Check if an argument is a scalar object — check_scalar","text":"*_scalar() check argument scalar object.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a scalar object — check_scalar","text":"","code":"check_scalar(x, null_ok = FALSE, .names = deparse(substitute(x)))  test_scalar(x, null_ok = FALSE, .names = deparse(substitute(x)))  assert_scalar(   x,   null_ok = FALSE,   .names = deparse(substitute(x)),   .var.name = checkmate::vname(x),   add = NULL )  expect_scalar(   x,   null_ok = FALSE,   .names = deparse(substitute(x)),   info = NULL,   label = checkmate::vname(x) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a scalar object — check_scalar","text":"x R object. null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user. .var.name (Optional) character string indicating name checked object print assertions. argument used internally set user. add (Optional) AssertCollection object indicating collection store assertion messages. argument used internally set user. info (Optional) character string extra information included message `testthat“ reporter. argument used internally set user. label (Optional) character string indicating name checked object print messages. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_scalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a scalar object — check_scalar","text":"","code":"test_scalar(1) #> [1] TRUE #> [1] TRUE # Expected  test_scalar(1:2) #> [1] FALSE #> [1] FALSE # Expected  test_scalar(list()) #> [1] FALSE #> [1] FALSE # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_temporal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a temporal object — check_temporal","title":"Check if an argument is a temporal object — check_temporal","text":"*_temporal() check argument temporal object.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_temporal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a temporal object — check_temporal","text":"","code":"check_temporal(   x,   rm = NULL,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  test_temporal(   x,   rm = NULL,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)) )  assert_temporal(   x,   rm = NULL,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   .var.name = checkmate::vname(x),   add = NULL )  expect_temporal(   x,   rm = NULL,   any_missing = TRUE,   null_ok = FALSE,   .names = deparse(substitute(x)),   info = NULL,   label = checkmate::vname(x) )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_temporal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a temporal object — check_temporal","text":"x R object. rm (Optional) character vector indicating name classes remove check. See Details section information (Default: NULL). any_missing (Optional) logical flag indicating missing values allowed (Default: TRUE). null_ok (Optional) logical flag indicating NULL values allowed (Default: FALSE). .names (Optional) character vector specifying names objects tested. argument used internally set user. .var.name (Optional) character string indicating name checked object print assertions. argument used internally set user. add (Optional) AssertCollection object indicating collection store assertion messages. argument used internally set user. info (Optional) character string extra information included message `testthat“ reporter. argument used internally set user. label (Optional) character string indicating name checked object print messages. argument used internally set user.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_temporal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a temporal object — check_temporal","text":"test_*: TRUE passes test; FALSE otherwise. check_*: TRUE passes test; string message otherwise. assertion_*: input (invisible) passes test; error message otherwise. expect_*: input (invisible) passes test; error message otherwise.","code":""},{"path":"https://danielvartan.github.io/prettycheck/reference/check_temporal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a temporal object — check_temporal","text":"functions check following classes temporal objects:","code":"classes <- c(   \"Duration\", \"Period\", \"difftime\", \"hms\", \"Date\", \"POSIXct\",   \"POSIXlt\", \"Interval\", \"ts\", \"tsibble\", \"zoo\", \"xts\", \"timeDate\",   \"timeSeries\", \"circular\", \"yearmon\", \"yearqtr\", \"year\", \"quarter\",   \"month\", \"week\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\",   \"microsecond\", \"nanosecond\" )"},{"path":"https://danielvartan.github.io/prettycheck/reference/check_temporal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a temporal object — check_temporal","text":"","code":"test_temporal(1) #> [1] FALSE #> [1] FALSE # Expected  test_temporal(\"a\") #> [1] FALSE #> [1] FALSE # Expected  test_temporal(lubridate::dhours()) #> [1] TRUE #> [1] TRUE # Expected  test_temporal(lubridate::hours()) #> [1] TRUE #> [1] TRUE # Expected  test_temporal(as.difftime(1, units = \"hours\")) #> [1] TRUE #> [1] TRUE # Expected  test_temporal(hms::parse_hm(\"01:00\")) #> [1] TRUE #> [1] TRUE # Expected  test_temporal(as.Date(\"2020-01-01\")) #> [1] TRUE #> [1] TRUE # Expected  test_temporal(Sys.time()) #> [1] TRUE #> [1] TRUE # Expected  int <- lubridate::interval(as.Date(\"2001-01-01\"), as.Date(\"2002-01-01\")) test_temporal(int) #> [1] TRUE #> [1] TRUE # Expected  test_temporal(c(lubridate::dhours(), NA), any_missing = FALSE) #> [1] FALSE #> [1] FALSE # Expected  test_temporal(NULL, null_ok = FALSE) #> [1] FALSE #> [1] FALSE # Expected"},{"path":"https://danielvartan.github.io/prettycheck/reference/prettycheck-package.html","id":null,"dir":"Reference","previous_headings":"","what":"prettycheck: Pretty assertive programming — prettycheck-package","title":"prettycheck: Pretty assertive programming — prettycheck-package","text":"Provides set functions produce pretty informative error messages.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/prettycheck/reference/prettycheck-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"prettycheck: Pretty assertive programming — prettycheck-package","text":"Maintainer: Daniel Vartanian danvartan@gmail.com (ORCID) [conceptor, copyright holder]","code":""},{"path":"https://danielvartan.github.io/prettycheck/news/index.html","id":"prettycheck-0009000","dir":"Changelog","previous_headings":"","what":"prettycheck 0.0.0.9000","title":"prettycheck 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
